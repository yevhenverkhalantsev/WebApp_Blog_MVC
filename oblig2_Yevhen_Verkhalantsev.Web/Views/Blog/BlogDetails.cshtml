@using oblig2_Yevhen_Verkhalantsev.Web.Models.Blog
@using oblig2_Yevhen_Verkhalantsev.Database
@using oblig2_Yevhen_Verkhalantsev.Services.UserServices
@model BlogDetailsHttpGetViewModel
@inject ICurrentUserContext CurrentUserContext

<div class="container">
    <div class="card">
        <div class="card-header">
            <h5 class="card-title" style="color: black">
                @if (Model.IsError)
                {
                    @Model.ErrorMessage
                }
                else
                {
                    @Model.Blog.Title
                }
                
                <input type="button" class="btn btn-outline-dark float-end" value="add post" style="" id="create-new-post-button" data-bs-target="#create-new-post-modal" data-bs-toggle="modal"/>
                <div class="modal fade" id="create-new-post-modal" tabindex="-1" >
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">Create new post</div>
                            <div class="modal-body bg-secondary rounded h-100 p-4">
                                    
                                <div class="mb-3">
                                    <label class="form-label">Title</label>
                                    <input type="text" class="form-control" id="post-title">
                                </div>
                                
                                <div class="mb-3">
                                    <label class="form-label">Content</label>
                                    <input type="text" class="form-control" id="post-content">
                                </div>
                                
                            </div>
                            <div class="modal-footer">
                                <button id="btnCreate" type="button" style="margin-bottom: 10px" class="btn btn-success">Create</button>
                                                                            
                                <div id="create-success-label" class="alert alert-success d-none">
                                    Created successfully!
                                </div>
                                <div id="create-error-label" class="alert alert-danger d-none">
                                    Error on created!
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </h5>
        </div>
    </div>
    <br/>
    @if (Model.IsError == false)
    {
        @foreach (PostEntity postEntity in Model.Blog.Posts)
        {
            <div id="post-container-@postEntity.Id">
                <div class="card">
                    <div class="card-header">
                        <div class="row">
                            <h5 class="col-md" style="color: black">
                                @postEntity.Title
                            </h5>
                            <label>
                                @postEntity.CreatedAt.ToString("dd.MM.yyyy HH:mm")
                            </label>
                        </div>

                    </div>
                    
                    <div class="card-body">
                        <p>
                            @postEntity.Content
                        </p>
                        
                        <br/>
                        <hr/>
                        <br/>
                    <div id="comments-section-@postEntity.Id">
                        <h6 style="color: black">Comments:</h6>
                        <div id="comments-container-@postEntity.Id">
                            @foreach (CommentEntity comment in postEntity.Comments)
                            {
                                <div id="comment-@comment.Id" class="d-flex justify-content-between align-items-center border-bottom mb-2 pb-2">
                                    <span>@comment.Content</span>
                                    <div>
                                        <button class="btn btn-sm btn-outline-secondary" onclick="editComment(@comment.Id)" data-bs-target="#edit-comment-modal" data-bs-toggle="modal">Edit</button>
                                        <button class="btn btn-sm btn-outline-danger" onclick="deleteComment(@comment.Id)">Delete</button>
                                    </div>
                                </div>
                            }
                            
                            
                            
                        </div>
                        
                        <div class="input-group mb-3">
                            <input type="text" class="form-control" placeholder="Write a comment..." id="comment-input-@postEntity.Id">
                            <button class="btn btn-outline-secondary" type="button" onclick="addComment(@postEntity.Id)">Comment</button>
                        </div>
                    </div>
                        
                    </div>
                    <div class="card-footer">
                        <input type="button" class="btn btn-danger" value="Delete" id="remove-post-@postEntity.Id"/>
                        <input type="button" class="btn btn-warning" value="Edit" id="edit-post-@postEntity.Id" data-bs-target="#edit-post-modal" data-bs-toggle="modal" onclick="getPostById(@postEntity.Id)"/>
                    </div>
                </div>
                <br />
            </div>
        }
        
        <div class="modal fade" id="edit-comment-modal" tabindex="-1" >
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        Edit comment
                    </div>
                    <div class="modal-body">
                        <input type="text" class="form-control" id="edit-comment"/>
                    </div>
                    <div class="modal-footer">
                        <button id="btn-save-comment" type="button" style="margin-bottom: 10px" class="btn btn-success" onclick="saveCommentData()">Save</button>
                        <input class="d-none" id="close-edit-comment-button" data-dismiss="modal"/>
                    </div>
                </div>
            </div>
        </div>




            <div class="modal fade" id="edit-post-modal" tabindex="-1">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header" id="edit-post-modal-header">Edit post: </div>
                        <div class="modal-body bg-secondary rounded h-100 p-4">

                            <div class="mb-3">
                                <label class="form-label">Title</label>
                                <input type="text" class="form-control" id="edit-post-title">
                            </div>

                            <div class="mb-3">
                                <label class="form-label">Content</label>
                                <input type="text" class="form-control" id="edit-post-content">
                            </div>

                        </div>
                        <div class="modal-footer">
                            <button id="btn-save" type="button" style="margin-bottom: 10px" class="btn btn-success" onclick="savePostData()">Save</button>

                            <div id="edit-success-label" class="alert alert-success d-none">
                                Updated successfully!
                            </div>
                            <div id="edit-error-label" class="alert alert-danger d-none">
                                Error on updated!
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            }
        </div>

@section Scripts
{
    <script>
    
    let removeButtons = document.querySelectorAll('[id^="remove-post-"]');
    removeButtons.forEach(btn=>{
        btn.addEventListener('click',()=>{
            let buttonIdParts = btn.id.split('-');
            let postId = buttonIdParts[buttonIdParts.length - 1];
            let data = {
                Id: postId
            }
            
            let JSONData = JSON.stringify(data);
            $.ajax({
                url: "@Url.Action("Delete", "Post")",
                type: 'POST',
                contentType: 'application/json; charset=utf-8',
                data: JSONData,
                dataType: 'json',
                success: (response) =>{
                    document.getElementById('post-container-'+postId).remove();
                },
                error: (response) =>{
                    alert("Error")
                }
            })
        })
    })
    
    function addComment(postId) {
        let commentContent = $('#comment-input-' + postId).val()
        
        if(commentContent.trim() === '') {
            alert('Comment cannot be empty');
            return;
        }
    
        let data = {
            PostId: postId,
            Content: commentContent,
            UserId: Number('@CurrentUserContext.Id')
        };
    
        let jsonData = JSON.stringify(data);
    
        $.ajax({
            url: '@Url.Action("Create", "Comment")',
            method: 'post',
            data: jsonData,
            dataType: 'json',
            contentType: 'application/json; charset=utf-8',
            success: function(response) {
                
                $('#comment-input-' + postId).val('');
                
                let commentContainer = document.createElement('div')
                commentContainer.id = 'comment-' + response.result.id;
                commentContainer.classList.add('d-flex')
                commentContainer.classList.add('justify-content-between')
                commentContainer.classList.add('align-items-center')
                commentContainer.classList.add('border-bottom')
                commentContainer.classList.add('mb-2')
                commentContainer.classList.add('pb-2')
              
                let commentContent = document.createElement('span')
                commentContent.innerHTML = response.result.content;
                
                let commentButtonsContainer = document.createElement('div')
                
                let editCommentButton = document.createElement('button')
                editCommentButton.classList.add('btn')
                editCommentButton.classList.add('btn-sm')
                editCommentButton.classList.add('btn-outline-secondary')
                editCommentButton.innerHTML = 'Edit'
                editCommentButton.dataset.bsTarget = '#edit-comment-modal'
                editCommentButton.dataset.bsToggle = 'modal'
                
                let deleteCommentButton = document.createElement('button')
                deleteCommentButton.classList.add('btn')
                deleteCommentButton.classList.add('btn-sm')
                deleteCommentButton.classList.add('btn-outline-danger')
                deleteCommentButton.innerHTML = 'Delete'
                
                commentButtonsContainer.appendChild(editCommentButton)
                commentButtonsContainer.appendChild(deleteCommentButton)
                
                commentContainer.appendChild(commentContent)
                commentContainer.appendChild(commentButtonsContainer)
                document.getElementById('comments-container-' + postId).appendChild(commentContainer);
                
                editCommentButton.onclick = function() {
                    editComment(response.result.id);
                }
                
                deleteCommentButton.onclick = function() {
                    deleteComment(response.result.id);
                }
                
            },
            error: function() {
                alert('Error posting comment');
            }
        });
    }

    
$("#btnCreate").on('click', ()=>{
    let data = {
        Title: $("#post-title").val(),
        Content: $("#post-content").val(),
        BlogId: Number(@Model.Blog.Id)
    }

    let jsonData = JSON.stringify(data)

    $("#create-success-label").addClass("d-none")
    $("#create-error-label").addClass("d-none")

    $.ajax({
        url:'@Url.Action("Create", "Post")', 
        method: 'post',
        data: jsonData,
        dataType: 'json',
        contentType: 'application/json; charset=utf-8',
        success:(response)=>{
            $("#create-success-label").removeClass("d-none")
            setTimeout(()=>{
                let createPostModal = bootstrap.Modal.getInstance(document.getElementById('create-new-post-modal'));
                createPostModal.hide();
                $("#create-success-label").addClass("d-none")
            }, 3000)
            $("#post-title").val("")
            $("#post-content").val("")
        },
        error:(response)=>{
            $("#create-error-label").removeClass("d-none")
        }
    })
})

            
            let selectedPostToEditId = -1;
            
    function getPostById(id){
        selectedPostToEditId = id;
        let data = {
            Id: id
        }
        let jsonData = JSON.stringify(data)
        $.ajax({
            url: '@Url.Action("GetById", "Post")',
            method: 'post',
            data: jsonData,
            dataType: 'json',
            contentType: 'application/json; charset=utf-8',
            success: (response)=>{
                document.getElementById("edit-post-modal-header").innerHTML = "Edit post: " + response.result.title
                $("#edit-post-title").val(response.result.title)
                $("#edit-post-content").val(response.result.content)
            },
            error: (response)=>{
                alert("Error")
            }
        })
    }
    
    function savePostData(){
        if (selectedPostToEditId != -1){
            $("#edit-success-label").addClass("d-none")
            $("#edit-error-label").addClass("d-none")
            
            let data = {
                Id: selectedPostToEditId,
                Title: $("#edit-post-title").val(),
                Content: $("#edit-post-content").val()
            }
            
            let jsonData = JSON.stringify(data)
           
            $.ajax({
                url: '@Url.Action("Update", "Post")',
                method: 'post',
                data: jsonData,
                dataType: 'json',
                contentType: 'application/json; charset=utf-8',
                success: (response)=>{
                    $("#edit-success-label").removeClass("d-none")
                    setTimeout(()=>{
                        let editPostModal = bootstrap.Modal.getInstance(document.getElementById('edit-post-modal'));
                        editPostModal.hide();
                        $("#edit-success-label").addClass("d-none")
                    }, 3000)
                },
                error: (response)=>{
                    $("#edit-error-label").removeClass("d-none")
                }
            })
        }
    }
    
    function deleteComment(commentId){
        let data = {
            Id: Number(commentId)
        }
       
        let jsonData = JSON.stringify(data)
        
        $.ajax({
            url: '@Url.Action("Delete", "Comment")',
            method: 'post',
            data: jsonData,
            dataType: 'json',
            contentType: 'application/json; charset=utf-8',
            success: (response)=>{
                alert("Success")
            },
            error: (response)=>{
                alert("Error")
            }
        })
    }
    
    let commentToEditId = -1;
    
    function editComment(commentId) {
        commentToEditId = commentId;
        
        let data = {
            Id: Number(commentId)
        }
        
        $.ajax({
            url: '@Url.Action("GetCommentById", "Comment")',
            method: 'GET',
            data: data,
            success: (response)=>{
                $('#edit-comment').val(response.result.content)
            },
            error: (response)=>{
                alert("Error")
            }
        })
    }
    
    function saveCommentData() {
        if (commentToEditId != -1){
            let data = {
                Id: commentToEditId,
                Content: $("#edit-comment").val()
            }
            
            let jsonData = JSON.stringify(data)
            
            $.ajax({
                url: '@Url.Action("Update", "Comment")',
                method: 'post',
                data: jsonData,
                dataType: 'json',
                contentType: 'application/json; charset=utf-8',
                success: (response)=>{
                    document.getElementById('close-edit-comment-button').click();
                },
                error: (response)=>{
                    alert("Error")
                }
            })
        }
    }
    
    </script>
}
